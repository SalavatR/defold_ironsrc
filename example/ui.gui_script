local dirtylarry = require "gooey.themes.dirtylarry.dirtylarry"

-- Get app_key at https://platform.ironsrc.com/partners/applications
-- and put it in game.project at [ironsource] section
-- or simply hardcode it here
local YOUR_APP_KEY = sys.get_config("ironsource.app_key", "invalid")

local BACK_KEY = hash("back")
local REWARDED = "rewardedVideo"
local INTERSTITIAL = "interstitial"

local REWARDED_LABEL  = hash(REWARDED .. "/label")
local INTERSTITIAL_LABEL = hash(INTERSTITIAL .. "/label")

local AVAILABLE_COLOR = vmath.vector4(1)
local NOT_AVAILABLE_COLOR = vmath.vector4(1, 0, 0, 1)

local MAX_LOG_LINES = 30

local function log(self, msg)
  self.log_lines = self.log_lines or { }
  self.log_node = self.log_node or gui.get_node("log")

  local count = #self.log_lines
  if count >= MAX_LOG_LINES then
    for i = 1, count - MAX_LOG_LINES + 1 do
      table.remove(self.log_lines, 1)
    end
  end
  table.insert(self.log_lines, msg)
  
  local text = table.concat(self.log_lines, "\n")
  gui.set_text(self.log_node, text)
  print(msg)
end

local function on_rewarded_availability_change(self, available)
  local node = gui.get_node(REWARDED_LABEL)
  local color = available and AVAILABLE_COLOR or NOT_AVAILABLE_COLOR
  gui.set_color(node, color)
  log(self, "on_rewarded_availability_change: " .. tostring(available))
end

local function on_interstitial_availability_change(self, available)
  local node = gui.get_node(INTERSTITIAL_LABEL)
  local color = available and AVAILABLE_COLOR or NOT_AVAILABLE_COLOR
  gui.set_color(node, color)
  log(self, "on_interstitial_availability_change: " .. tostring(available))
end

local function try_show_rewarded(self)
  if ironsource then
    local is_ready = ironsource.is_rewarded_ready()
    log(self, "try_show_rewarded - ready: " .. tostring(is_ready))
    
    if is_ready then
      ironsource.show_rewarded()
    end
  end
end

local function try_show_interstitial(self)
  if ironsource then
    local is_ready = ironsource.is_interstitial_ready()
    log(self, "try_show_interstitial - ready: " .. tostring(is_ready))
    
    if is_ready then
      ironsource.show_interstitial()
    end
  end
end

local function ironsource_callback(self, message_type)
  if message_type == ironsource.INTERSTITIAL_DID_LOAD then
    log(self, "ironsource_callback: INTERSTITIAL_DID_LOAD")
    on_interstitial_availability_change(self, true)
  elseif message_type == ironsource.INTERSTITIAL_DID_SHOW then
    log(self, "ironsource_callback: INTERSTITIAL_DID_SHOW")
  elseif message_type == ironsource.INTERSTITIAL_DID_CLICK then
    log(self, "ironsource_callback: INTERSTITIAL_DID_CLICK")
  elseif message_type == ironsource.INTERSTITIAL_DID_CLOSE then
    log(self, "ironsource_callback: INTERSTITIAL_DID_CLOSE")
    ironsource.load_interstitial()
  elseif message_type == ironsource.INTERSTITIAL_DID_OPEN then
    log(self, "ironsource_callback: INTERSTITIAL_DID_OPEN")
    on_interstitial_availability_change(self, false)
  elseif message_type == ironsource.INTERSTITIAL_DID_FAIL_TO_SHOW then
    log(self, "ironsource_callback: INTERSTITIAL_DID_FAIL_TO_SHOW")
    on_interstitial_availability_change(self, false)
    ironsource.load_interstitial()
  elseif message_type == ironsource.INTERSTITIAL_DID_FAIL_TO_LOAD then
    log(self, "ironsource_callback: INTERSTITIAL_DID_FAIL_TO_LOAD")
  elseif message_type == ironsource.REWARDED_AVAILABLE then
    log(self, "ironsource_callback: REWARDED_AVAILABLE")
    on_rewarded_availability_change(self, true)
  elseif message_type == ironsource.REWARDED_NOT_AVAILABLE then
    log(self, "ironsource_callback: REWARDED_NOT_AVAILABLE")
    on_rewarded_availability_change(self, false)
  elseif message_type == ironsource.REWARDED_DID_COMPLETE then
    log(self, "ironsource_callback: REWARDED_DID_COMPLETE")
  elseif message_type == ironsource.REWARDED_DID_FAIL then
    log(self, "ironsource_callback: REWARDED_DID_FAIL")
  elseif message_type == ironsource.REWARDED_DID_OPEN then
    log(self, "ironsource_callback: REWARDED_DID_OPEN")
  elseif message_type == ironsource.REWARDED_DID_CLOSE then
    log(self, "ironsource_callback: REWARDED_DID_CLOSE")
  elseif message_type == ironsource.REWARDED_DID_CLICK then
    log(self, "ironsource_callback: REWARDED_DID_CLICK")
  elseif message_type == ironsource.REWARDED_DID_START then
    log(self, "ironsource_callback: REWARDED_DID_START")
  elseif message_type == ironsource.REWARDED_DID_END then
    log(self, "ironsource_callback: REWARDED_DID_END")
  end
end

function init(self)
  msg.post(".", "acquire_input_focus")

  on_rewarded_availability_change(self, false)
  on_interstitial_availability_change(self, false)
  
  if ironsource then
    log(self, "ironsource init with app_key: " .. YOUR_APP_KEY)
    ironsource.init(YOUR_APP_KEY)
    ironsource.set_callback(ironsource_callback)
    ironsource.validate_integration()
    ironsource.load_interstitial()
  else
    log(self, "ironsource - not supported platform: " .. sys.get_sys_info().system_name)
  end
end

function final(self)
  log(self, "Final! Remove Callback!")
  if ironsource then
    ironsource.set_callback()
  end
end

function on_input(self, action_id, action)
  dirtylarry.button(REWARDED, action_id, action, function ()
    try_show_rewarded(self)
  end)

  dirtylarry.button(INTERSTITIAL, action_id, action, function ()
    try_show_interstitial(self)
  end)

  if action_id == BACK_KEY and action.released then
    log(self, "Time to exit!")
    msg.post("@system:", "exit", {code = 0})
  end
end
